/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface NfinityInterface extends utils.Interface {
  functions: {
    "cancelEvent(uint256)": FunctionFragment;
    "cancelPurchase(uint256,string,string)": FunctionFragment;
    "checkIn(uint256)": FunctionFragment;
    "closeStore()": FunctionFragment;
    "completeEvent(uint256)": FunctionFragment;
    "createEvent(string,address,string,uint256,uint256,uint256)": FunctionFragment;
    "endTicketSales(uint256)": FunctionFragment;
    "fetchEventInfo(uint256)": FunctionFragment;
    "fetchEventSalesInfo(uint256)": FunctionFragment;
    "fetchPurchaseInfo(uint256)": FunctionFragment;
    "fetchStoreInfo()": FunctionFragment;
    "getAccountRole(address)": FunctionFragment;
    "getCountCustomerPurchases(address)": FunctionFragment;
    "getCountCustomers()": FunctionFragment;
    "getCountOrganizerEvents(address)": FunctionFragment;
    "getCountOrganizers()": FunctionFragment;
    "getCustomerByIndex(uint256)": FunctionFragment;
    "getEventIdByIndex(address,uint256)": FunctionFragment;
    "getEventIdsByOrganizer(address)": FunctionFragment;
    "getOrganizerByIndex(uint256)": FunctionFragment;
    "getPurchaseIdByIndex(address,uint256)": FunctionFragment;
    "getPurchaseIdsByCustomer(address)": FunctionFragment;
    "openStore()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseTickets(uint256,uint256,string,uint256,string)": FunctionFragment;
    "refundPurchase(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "settleEvent(uint256)": FunctionFragment;
    "startTicketSales(uint256)": FunctionFragment;
    "suspendStore()": FunctionFragment;
    "suspendTicketSales(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelEvent"
      | "cancelPurchase"
      | "checkIn"
      | "closeStore"
      | "completeEvent"
      | "createEvent"
      | "endTicketSales"
      | "fetchEventInfo"
      | "fetchEventSalesInfo"
      | "fetchPurchaseInfo"
      | "fetchStoreInfo"
      | "getAccountRole"
      | "getCountCustomerPurchases"
      | "getCountCustomers"
      | "getCountOrganizerEvents"
      | "getCountOrganizers"
      | "getCustomerByIndex"
      | "getEventIdByIndex"
      | "getEventIdsByOrganizer"
      | "getOrganizerByIndex"
      | "getPurchaseIdByIndex"
      | "getPurchaseIdsByCustomer"
      | "openStore"
      | "owner"
      | "purchaseTickets"
      | "refundPurchase"
      | "renounceOwnership"
      | "settleEvent"
      | "startTicketSales"
      | "suspendStore"
      | "suspendTicketSales"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelEvent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPurchase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeEvent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endTicketSales",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEventInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEventSalesInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPurchaseInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStoreInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountCustomerPurchases",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountCustomers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOrganizerEvents",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOrganizers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventIdByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventIdsByOrganizer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseIdByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseIdsByCustomer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "openStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseTickets",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundPurchase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleEvent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startTicketSales",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "suspendTicketSales",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTicketSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchEventSalesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchPurchaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchStoreInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountCustomerPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountCustomers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOrganizerEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOrganizers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventIdsByOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseIdsByCustomer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTicketSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendTicketSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CustomerCheckedIn(uint256,uint256,address)": EventFragment;
    "EventCancelled(uint256,bytes32,address)": EventFragment;
    "EventCompleted(uint256,bytes32,address)": EventFragment;
    "EventCreated(uint256,bytes32,address)": EventFragment;
    "EventSalesFinished(uint256,bytes32,address)": EventFragment;
    "EventSalesStarted(uint256,bytes32,address)": EventFragment;
    "EventSalesSuspended(uint256,bytes32,address)": EventFragment;
    "EventSettled(uint256,bytes32,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchaseCancelled(uint256,bytes32,address,uint256)": EventFragment;
    "PurchaseCompleted(uint256,bytes32,address,uint256)": EventFragment;
    "PurchaseRefunded(uint256,bytes32,address,uint256)": EventFragment;
    "StoreClosed(address,uint256,uint256)": EventFragment;
    "StoreOpen(address)": EventFragment;
    "StoreSuspended(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomerCheckedIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSalesFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSalesStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSalesSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSuspended"): EventFragment;
}

export interface CustomerCheckedInEventObject {
  _eventId: BigNumber;
  _purchaseId: BigNumber;
  _by: string;
}
export type CustomerCheckedInEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CustomerCheckedInEventObject
>;

export type CustomerCheckedInEventFilter =
  TypedEventFilter<CustomerCheckedInEvent>;

export interface EventCancelledEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventCancelledEvent = TypedEvent<
  [BigNumber, string, string],
  EventCancelledEventObject
>;

export type EventCancelledEventFilter = TypedEventFilter<EventCancelledEvent>;

export interface EventCompletedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventCompletedEvent = TypedEvent<
  [BigNumber, string, string],
  EventCompletedEventObject
>;

export type EventCompletedEventFilter = TypedEventFilter<EventCompletedEvent>;

export interface EventCreatedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface EventSalesFinishedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventSalesFinishedEvent = TypedEvent<
  [BigNumber, string, string],
  EventSalesFinishedEventObject
>;

export type EventSalesFinishedEventFilter =
  TypedEventFilter<EventSalesFinishedEvent>;

export interface EventSalesStartedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventSalesStartedEvent = TypedEvent<
  [BigNumber, string, string],
  EventSalesStartedEventObject
>;

export type EventSalesStartedEventFilter =
  TypedEventFilter<EventSalesStartedEvent>;

export interface EventSalesSuspendedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
}
export type EventSalesSuspendedEvent = TypedEvent<
  [BigNumber, string, string],
  EventSalesSuspendedEventObject
>;

export type EventSalesSuspendedEventFilter =
  TypedEventFilter<EventSalesSuspendedEvent>;

export interface EventSettledEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
  _settlement: BigNumber;
}
export type EventSettledEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  EventSettledEventObject
>;

export type EventSettledEventFilter = TypedEventFilter<EventSettledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchaseCancelledEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
  _eventId: BigNumber;
}
export type PurchaseCancelledEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PurchaseCancelledEventObject
>;

export type PurchaseCancelledEventFilter =
  TypedEventFilter<PurchaseCancelledEvent>;

export interface PurchaseCompletedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
  _eventId: BigNumber;
}
export type PurchaseCompletedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PurchaseCompletedEventObject
>;

export type PurchaseCompletedEventFilter =
  TypedEventFilter<PurchaseCompletedEvent>;

export interface PurchaseRefundedEventObject {
  _id: BigNumber;
  _extId: string;
  _by: string;
  _eventId: BigNumber;
}
export type PurchaseRefundedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PurchaseRefundedEventObject
>;

export type PurchaseRefundedEventFilter =
  TypedEventFilter<PurchaseRefundedEvent>;

export interface StoreClosedEventObject {
  _by: string;
  _settlement: BigNumber;
  _excess: BigNumber;
}
export type StoreClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StoreClosedEventObject
>;

export type StoreClosedEventFilter = TypedEventFilter<StoreClosedEvent>;

export interface StoreOpenEventObject {
  _by: string;
}
export type StoreOpenEvent = TypedEvent<[string], StoreOpenEventObject>;

export type StoreOpenEventFilter = TypedEventFilter<StoreOpenEvent>;

export interface StoreSuspendedEventObject {
  _by: string;
}
export type StoreSuspendedEvent = TypedEvent<
  [string],
  StoreSuspendedEventObject
>;

export type StoreSuspendedEventFilter = TypedEventFilter<StoreSuspendedEvent>;

export interface Nfinity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NfinityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelPurchase(
      _purchaseId: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _customerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkIn(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _externalId: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _storeIncentive: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _ticketsOnSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchEventInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        eventStatus: BigNumber;
        eventExternalId: string;
        eventOrganizer: string;
        eventName: string;
        eventStoreIncentive: BigNumber;
        eventTicketPrice: BigNumber;
        eventTicketsOnSale: BigNumber;
      }
    >;

    fetchEventSalesInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        eventStatus: BigNumber;
        eventTicketsSold: BigNumber;
        eventTicketsLeft: BigNumber;
        eventTicketsCancelled: BigNumber;
        eventTicketsRefunded: BigNumber;
        eventTicketsCheckedIn: BigNumber;
        eventBalance: BigNumber;
        eventRefundableBalance: BigNumber;
      }
    >;

    fetchPurchaseInfo(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        purchaseStatus: BigNumber;
        purchaseExternalId: string;
        purchaseTimestamp: BigNumber;
        purchaseCustomer: string;
        purchaseCustomerId: string;
        purchaseQuantity: BigNumber;
        purchaseTotal: BigNumber;
        purchaseEventId: BigNumber;
      }
    >;

    fetchStoreInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        storeOwner: string;
        storeStatus: BigNumber;
        storeName: string;
        storeSettledBalance: BigNumber;
        storeExcessBalance: BigNumber;
        storeRefundableBalance: BigNumber;
        storeCounterEvents: BigNumber;
        storeCounterPurchases: BigNumber;
      }
    >;

    getAccountRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        accountIsOwner: boolean;
        accountIsOrganizer: boolean;
        accountIsCustomer: boolean;
      }
    >;

    getCountCustomerPurchases(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { countPurchases: BigNumber }>;

    getCountCustomers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { countCustomers: BigNumber }>;

    getCountOrganizerEvents(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { countEvents: BigNumber }>;

    getCountOrganizers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { countOrganizers: BigNumber }>;

    getCustomerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { customer: string }>;

    getEventIdByIndex(
      _organizer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { eventId: BigNumber }>;

    getEventIdsByOrganizer(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { eventIds: BigNumber[] }>;

    getOrganizerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { organizer: string }>;

    getPurchaseIdByIndex(
      _customer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { purchaseId: BigNumber }>;

    getPurchaseIdsByCustomer(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { purchaseIds: BigNumber[] }>;

    openStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _customerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundPurchase(
      _eventId: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelEvent(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelPurchase(
    _purchaseId: PromiseOrValue<BigNumberish>,
    _externalId: PromiseOrValue<string>,
    _customerId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkIn(
    _purchaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeStore(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeEvent(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _externalId: PromiseOrValue<string>,
    _organizer: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _storeIncentive: PromiseOrValue<BigNumberish>,
    _ticketPrice: PromiseOrValue<BigNumberish>,
    _ticketsOnSale: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTicketSales(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchEventInfo(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
      eventStatus: BigNumber;
      eventExternalId: string;
      eventOrganizer: string;
      eventName: string;
      eventStoreIncentive: BigNumber;
      eventTicketPrice: BigNumber;
      eventTicketsOnSale: BigNumber;
    }
  >;

  fetchEventSalesInfo(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      eventStatus: BigNumber;
      eventTicketsSold: BigNumber;
      eventTicketsLeft: BigNumber;
      eventTicketsCancelled: BigNumber;
      eventTicketsRefunded: BigNumber;
      eventTicketsCheckedIn: BigNumber;
      eventBalance: BigNumber;
      eventRefundableBalance: BigNumber;
    }
  >;

  fetchPurchaseInfo(
    _purchaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      purchaseStatus: BigNumber;
      purchaseExternalId: string;
      purchaseTimestamp: BigNumber;
      purchaseCustomer: string;
      purchaseCustomerId: string;
      purchaseQuantity: BigNumber;
      purchaseTotal: BigNumber;
      purchaseEventId: BigNumber;
    }
  >;

  fetchStoreInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      storeOwner: string;
      storeStatus: BigNumber;
      storeName: string;
      storeSettledBalance: BigNumber;
      storeExcessBalance: BigNumber;
      storeRefundableBalance: BigNumber;
      storeCounterEvents: BigNumber;
      storeCounterPurchases: BigNumber;
    }
  >;

  getAccountRole(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      accountIsOwner: boolean;
      accountIsOrganizer: boolean;
      accountIsCustomer: boolean;
    }
  >;

  getCountCustomerPurchases(
    _customer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCountCustomers(overrides?: CallOverrides): Promise<BigNumber>;

  getCountOrganizerEvents(
    _organizer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCountOrganizers(overrides?: CallOverrides): Promise<BigNumber>;

  getCustomerByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEventIdByIndex(
    _organizer: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEventIdsByOrganizer(
    _organizer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOrganizerByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPurchaseIdByIndex(
    _customer: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPurchaseIdsByCustomer(
    _customer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  openStore(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseTickets(
    _eventId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _externalId: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _customerId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundPurchase(
    _eventId: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleEvent(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTicketSales(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendStore(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendTicketSales(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPurchase(
      _purchaseId: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _customerId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIn(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeStore(overrides?: CallOverrides): Promise<void>;

    completeEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _externalId: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _storeIncentive: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _ticketsOnSale: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchEventInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        eventStatus: BigNumber;
        eventExternalId: string;
        eventOrganizer: string;
        eventName: string;
        eventStoreIncentive: BigNumber;
        eventTicketPrice: BigNumber;
        eventTicketsOnSale: BigNumber;
      }
    >;

    fetchEventSalesInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        eventStatus: BigNumber;
        eventTicketsSold: BigNumber;
        eventTicketsLeft: BigNumber;
        eventTicketsCancelled: BigNumber;
        eventTicketsRefunded: BigNumber;
        eventTicketsCheckedIn: BigNumber;
        eventBalance: BigNumber;
        eventRefundableBalance: BigNumber;
      }
    >;

    fetchPurchaseInfo(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        purchaseStatus: BigNumber;
        purchaseExternalId: string;
        purchaseTimestamp: BigNumber;
        purchaseCustomer: string;
        purchaseCustomerId: string;
        purchaseQuantity: BigNumber;
        purchaseTotal: BigNumber;
        purchaseEventId: BigNumber;
      }
    >;

    fetchStoreInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        storeOwner: string;
        storeStatus: BigNumber;
        storeName: string;
        storeSettledBalance: BigNumber;
        storeExcessBalance: BigNumber;
        storeRefundableBalance: BigNumber;
        storeCounterEvents: BigNumber;
        storeCounterPurchases: BigNumber;
      }
    >;

    getAccountRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        accountIsOwner: boolean;
        accountIsOrganizer: boolean;
        accountIsCustomer: boolean;
      }
    >;

    getCountCustomerPurchases(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountCustomers(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOrganizerEvents(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOrganizers(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEventIdByIndex(
      _organizer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventIdsByOrganizer(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOrganizerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPurchaseIdByIndex(
      _customer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseIdsByCustomer(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    openStore(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _customerId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundPurchase(
      _eventId: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    settleEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendStore(overrides?: CallOverrides): Promise<void>;

    suspendTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CustomerCheckedIn(uint256,uint256,address)"(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      _purchaseId?: PromiseOrValue<BigNumberish> | null,
      _by?: PromiseOrValue<string> | null
    ): CustomerCheckedInEventFilter;
    CustomerCheckedIn(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      _purchaseId?: PromiseOrValue<BigNumberish> | null,
      _by?: PromiseOrValue<string> | null
    ): CustomerCheckedInEventFilter;

    "EventCancelled(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCancelledEventFilter;
    EventCancelled(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCancelledEventFilter;

    "EventCompleted(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCompletedEventFilter;
    EventCompleted(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCompletedEventFilter;

    "EventCreated(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;
    EventCreated(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;

    "EventSalesFinished(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesFinishedEventFilter;
    EventSalesFinished(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesFinishedEventFilter;

    "EventSalesStarted(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesStartedEventFilter;
    EventSalesStarted(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesStartedEventFilter;

    "EventSalesSuspended(uint256,bytes32,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesSuspendedEventFilter;
    EventSalesSuspended(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null
    ): EventSalesSuspendedEventFilter;

    "EventSettled(uint256,bytes32,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _settlement?: null
    ): EventSettledEventFilter;
    EventSettled(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _settlement?: null
    ): EventSettledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PurchaseCancelled(uint256,bytes32,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseCancelledEventFilter;
    PurchaseCancelled(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseCancelledEventFilter;

    "PurchaseCompleted(uint256,bytes32,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseCompletedEventFilter;
    PurchaseCompleted(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseCompletedEventFilter;

    "PurchaseRefunded(uint256,bytes32,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseRefundedEventFilter;
    PurchaseRefunded(
      _id?: PromiseOrValue<BigNumberish> | null,
      _extId?: PromiseOrValue<BytesLike> | null,
      _by?: PromiseOrValue<string> | null,
      _eventId?: null
    ): PurchaseRefundedEventFilter;

    "StoreClosed(address,uint256,uint256)"(
      _by?: PromiseOrValue<string> | null,
      _settlement?: null,
      _excess?: null
    ): StoreClosedEventFilter;
    StoreClosed(
      _by?: PromiseOrValue<string> | null,
      _settlement?: null,
      _excess?: null
    ): StoreClosedEventFilter;

    "StoreOpen(address)"(
      _by?: PromiseOrValue<string> | null
    ): StoreOpenEventFilter;
    StoreOpen(_by?: PromiseOrValue<string> | null): StoreOpenEventFilter;

    "StoreSuspended(address)"(
      _by?: PromiseOrValue<string> | null
    ): StoreSuspendedEventFilter;
    StoreSuspended(
      _by?: PromiseOrValue<string> | null
    ): StoreSuspendedEventFilter;
  };

  estimateGas: {
    cancelEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelPurchase(
      _purchaseId: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _customerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkIn(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _externalId: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _storeIncentive: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _ticketsOnSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchEventInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchEventSalesInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchPurchaseInfo(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchStoreInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountCustomerPurchases(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountCustomers(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOrganizerEvents(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOrganizers(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventIdByIndex(
      _organizer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventIdsByOrganizer(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrganizerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseIdByIndex(
      _customer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseIdsByCustomer(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _customerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundPurchase(
      _eventId: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelPurchase(
      _purchaseId: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _customerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkIn(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _externalId: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _storeIncentive: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _ticketsOnSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchEventInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchEventSalesInfo(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPurchaseInfo(
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchStoreInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountCustomerPurchases(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountCustomers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCountOrganizerEvents(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountOrganizers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCustomerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventIdByIndex(
      _organizer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventIdsByOrganizer(
      _organizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrganizerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchaseIdByIndex(
      _customer: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchaseIdsByCustomer(
      _customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _externalId: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _customerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundPurchase(
      _eventId: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendStore(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendTicketSales(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
